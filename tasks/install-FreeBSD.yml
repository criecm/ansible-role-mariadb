---
- name: get installed server version
  command: 'pkg query -x "%v" "mariadb.*-server"'
  check_mode: False
  register: pkgvers
  changed_when: False
  failed_when: false

- name: fix facts
  set_fact:
    # 1. currently installed version
    installed_mariadb_version: '{% if pkgvers.stdout_lines | count > 0 
      %}{{ pkgvers.stdout_lines[0] }}{% else %}{{ False }}{% endif %}'

- name: fix facts
  set_fact:
    mariadb_server_ini: '{% if not installed_mariadb_version 
      or installed_mariadb_version is version("10.4.13",">=")
      %}{{ mariadb_etcdir }}/conf.d/server.cnf{% 
      else %}{{ mariadb_datadir }}/my.cnf{% endif %}'
    mariadb_socket: '{% if not installed_mariadb_version or 
      installed_mariadb_version is version("10.4.13",">=") 
      %}/var/run/mysql/mysql.sock{% else %}/tmp/mysql.sock{% endif %}'

- name: get current dbdir
  command: '/usr/sbin/sysrc -nq mysql_dbdir'
  changed_when: False
  failed_when: False
  check_mode: False
  register: curdatadir

- name: stat current dbdir
  stat:
    path: '{{ curdatadir.stdout }}/ibdata1'
  register: curdatadb

- name: fact it
  set_fact:
    currentdatadir: '{% if curdatadb.stat.exists %}{{ curdatadir.stdout }}{%
      else %}{{ mariadb_datadir }}{% if mariadb_zfs_base | bool %}/data{% endif %}{% endif %}'

- name: get innodb_logdir
  shell: 'eval $(grep ^innodb_log_group_home_dir {{ mariadb_server_ini }} | sed "s/ //g"); echo $innodb_log_group_home_dir'
  ignore_errors: True
  changed_when: False
  check_mode: False
  register: oldlogdir

- name: set innodblogdir fact
  set_fact:
    oldinnodblogdir: '{% if oldlogdir.stdout != "" %}{{ oldlogdir.stdout }}{% else %}{{ False }}{% endif %}'

- name: get pid of {{ mariadb_process_name }}
  command: pgrep {{ mariadb_process_name }}
  register: mypids
  check_mode: False
  changed_when: False
  failed_when: False

- name: fix facts
  set_fact:
    # 1. currently running one
    # 2. /data if zfs
    mariadb_datadir_wanted: '{{ mariadb_datadir }}'
    mariadb_datadir: '{{ currentdatadir }}'

- name: lock version
  set_fact:
    mariadb_version: '{{ installed_mariadb_version | regex_replace("^([0-9]+\.[0-9]+)\..*$","\1") }}'
  when: installed_mariadb_version | default(False) and mariadb_version is version(installed_mariadb_version, '>=') and 
    not do_upgrade_mariadb

- debug:
    msg: |
      have {{ installed_mariadb_version }}
      Want {{ mariadb_version }}
      Lives {{ mariadb_datadir }}
      Should {{ mariadb_datadir_wanted }}

- name: zfs layout
  include_tasks: 'zfs-layout.yml'
  when: mariadb_zfs_base | length > 0
  #and ( not curdatadb.stat.exists or do_upgrade_mariadb or mariadb_relayout_zfs | default(False))

#- name: mysql etcdirs
#  file:
#    path: '{{ item }}'
#    state: directory
#  loop:
#    - '{{ mariadb_etcdir }}'
#    - '{{ mariadb_etcdir }}/conf.d'

- name: remove old innodb options
  ini_file:
    path: '{{ mariadb_server_ini }}'
    section: '{{ mariadb_server_ini_section }}'
    option: '{{ item }}'
    state: absent
  loop:
    - innodb_use_trim
    - innodb_use_fallocate
    - innodb_file_format
  when: installed_mariadb_version and installed_mariadb_version | default(mariadb_version) is version('10.4', '>=')
  notify: restart mariadb

- name: '{{ mariadb_server_ini }}'
  ini_file:
    path: '{{ mariadb_server_ini }}'
    section: '{{ mariadb_server_ini_section }}'
    option: '{{ item.key }}'
    value: '{{ item.value | default(ignore) }}'
    allow_no_value: '{% if item.value == "" %}yes{% else %}no{% endif %}'
  loop: '{{ my_cnf_mysqld_default | combine(my_cnf_mysqld) | dict2items }}'
  when: 'installed_mariadb_version and mariadb_current_config[item.key] | default(False) and mariadb_current_config[item.key] != item.value'
  notify: restart mariadb

- name: syslog
  block:
    - name: no log_error
      ini_file:
        path: '{{ mariadb_server_ini }}'
        section: '{{ mariadb_server_ini_section }}'
        option: log_error
        state: absent
    - name: get rc args
      command: 'sysrc -qn mysql_args'
      register: getrcargs
      failed_when: False
      changed_when: False
      check_mode: False
    - name: syslog in rc.conf
      lineinfile:
        dest: /etc/rc.conf
        line: 'mysql_args="{{ getrcargs.stdout }} --syslog"'
        regexp: '^mysql_args='
      when: getrcargs.stdout is not search("--syslog")
      notify: reload syslogd
    - name: newsyslog
      copy:
        dest: /usr/local/etc/newsyslog.conf.d/mariadb.conf
        content: |
          {{ mariadb_logdir }}/mariadb.log   640 7 10000  *  CG
    - name: create log file if needed
      copy:
        dest: '{{ mariadb_logdir }}/mariadb.log'
        content: ''
        force: no
        mode: '0640'
  when: mariadb_use_syslog

- name: backup old my.cnf
  copy:
    src: '{{ mariadb_basedir }}/my.cnf'
    dest: '{{ mariadb_basedir }}/my.cnf.bak.ansible_backup'
    remote_src: yes
  failed_when: False
  register: oldini
  when: 'mariadb_server_ini != mariadb_basedir+"/my.cnf"'

- name: remove old my.cnf
  file:
    path: '{{ mariadb_basedir }}/my.cnf'
    state: absent
  when: 'mariadb_server_ini != mariadb_basedir+"/my.cnf" and not oldini.failed'
  notify: restart mariadb

- name: rc.conf
  lineinfile:
    dest: /etc/rc.conf
    line: '{{ item.key }}="{{ item.value }}"'
    regexp: '^{{ item.key }}='
  with_items:
    - { key: mysql_enable, value: "YES" }
    - { key: mysql_dbdir, value: '{{ mariadb_datadir }}' }
  when: curdatadir.rc != 0

- name: login.conf
  blockinfile:
    dest: /etc/login.conf
    content: |
      mysql:\
        :lang=fr_FR.UTF-8:\
        :charset=UTF-8:\
        :tc=daemon:

    marker: '# {mark} mariadb by ansible block'
    backup: yes
  register: loginconf

- name: cap_mkdb
  command: 'cap_mkdb /etc/login.conf'
  when: loginconf.changed

- name: prepare pkg upgrade
  command: '{{ item }}'
  when: installed_mariadb_version and do_upgrade_mariadb and installed_mariadb_version | default(mariadb_version) is version_compare(mariadb_version,"<")
  loop:
    - 'pkg set -yn mariadb{{ installed_mariadb_version | regex_replace("^([0-9]+)\.([0-9]+)\..*$","\1\2") }}-server:mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-server'
    - 'pkg set -yn mariadb{{ installed_mariadb_version | regex_replace("^([0-9]+)\.([0-9]+)\..*$","\1\2") }}-client:mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-client'

- name: upgrade all packages
  command: 'pkg upgrade -y'
  when: do_upgrade_mariadb or not installed_mariadb_version

- name: install pymysql
  pkgng:
    name: 'py{{ ansible_python_version | regex_replace("([2-3])\.([0-9]*)\..*$","\1\2") }}-pymysql'
    state: present

- name: install mariadb
  pkgng:
    name:
      - 'mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-server'
      - 'py{{ ansible_python_version | regex_replace("([2-3])\.([0-9]*)\..*$","\1\2") }}-pymysql'
    state: '{% if do_upgrade_mariadb | default(False) %}latest{% else %}present{% endif %}'
  register: install_mariadb
  notify: mysql_upgrade

- name: conf.d/server.cnf ZFS tuning
  ini_file:
    path: '{{ mariadb_server_ini }}'
    section: '{{ mariadb_server_ini_section }}'
    option: '{{ item.key }}'
    value: '{{ item.value }}'
  loop: '{{ my_cnf_mysqld_zfs | dict2items }}'
  when: 'mariadb_zfs_base | length > 0 and ( mariadb_current_config[item.key] | default(False) and mariadb_current_config[item.key] != item.value )'

- name: /var/run/mysql
  file:
    path: /var/run/mysql
    owner: '{{ mariadb_owner }}'
    mode: '0755'
    group: '{{ mariadb_group }}'
    state: directory

- name: newsyslog.conf.d
  file:
    path: /usr/local/etc/newsyslog.conf.d
    state: directory

- name: newsyslog
  copy:
    dest: /usr/local/etc/newsyslog.conf.d/mariadb.conf
    content: |
      {{ mariadb_logdir }}/*.log  {{ mariadb_owner }}:{{ mariadb_group }}  640 7 1000  @T00  G /var/run/mysql/mysqld.pid
  when: not mariadb_use_syslog

- name: get installed server version
  command: 'pkg query -x "%v" "mariadb.*-server"'
  check_mode: False
  register: pkgvers
  changed_when: False
  failed_when: false

- name: fix facts
  set_fact:
    # 1. currently running one
    # 2. /data if zfs
    mariadb_datadir: '{{ currentdatadir }}'
    installed_mariadb_version: '{% if pkgvers.stdout_lines | count > 0 
      %}{{ pkgvers.stdout_lines[0] }}{% endif %}'
  when: do_upgrade_mariadb | bool
