---
- name: get status
  include_tasks: status-FreeBSD.yml

- name: get current dbdir
  shell: '/usr/sbin/sysrc -nq mysql_dbdir || echo /var/db/mysql'
  changed_when: False
  failed_when: False
  check_mode: False
  register: curdatadir

- name: stat current dbdir
  stat:
    path: '{{ curdatadir.stdout }}/ibdata1'
    get_checksum: False
  register: curdatadb

- name: fact it
  set_fact:
    currentdatadir: '{% if curdatadb.stat.exists %}{{ curdatadir.stdout }}{%
      else %}{{ mariadb_datadir }}{% if mariadb_zfs_base | bool %}/data{% endif %}{% endif %}'

- name: get innodb_logdir
  shell: 'eval $(grep ^innodb_log_group_home_dir {{ mariadb_server_ini }} | sed "s/ //g"); echo $innodb_log_group_home_dir'
  ignore_errors: True
  changed_when: False
  check_mode: False
  register: oldlogdir

- name: set innodblogdir fact
  set_fact:
    oldinnodblogdir: '{% if oldlogdir.stdout != "" %}{{ oldlogdir.stdout }}{% else %}{{ currentdatadir }}{% endif %}'

- name: get pid of {{ mariadb_process_name }}
  command: pgrep {{ mariadb_process_name }}
  register: mypids
  check_mode: False
  changed_when: False
  failed_when: False

- name: fix facts
  set_fact:
    # 1. currently running one
    # 2. /data if zfs
    mariadb_datadir_wanted: '{{ mariadb_datadir }}'
    mariadb_datadir: '{{ currentdatadir }}'

- name: lock version
  set_fact:
    mariadb_version: '{{ installed_mariadb_version | regex_replace("^([0-9]+\.[0-9]+)\..*$","\1") }}'
  when: installed_mariadb_version | default(False) and not do_upgrade_mariadb

- name: show detected dirs
  debug:
    msg: |
      have {{ installed_mariadb_version }}
      Want {{ mariadb_version }}
      Lives {{ mariadb_datadir }}
      Should {{ mariadb_datadir_wanted }}

- name: login.conf
  blockinfile:
    dest: /etc/login.conf
    content: |
      mysql:\
        :lang=fr_FR.UTF-8:\
        :charset=UTF-8:\
        :tc=daemon:

    marker: '# {mark} mariadb by ansible block'
    backup: yes
  register: loginconf

- name: cap_mkdb
  command: 'cap_mkdb /etc/login.conf'
  when: loginconf.changed

- name: prepare pkg upgrade
  command: '{{ item }}'
  when: installed_mariadb_version and do_upgrade_mariadb and installed_mariadb_version | default(mariadb_version) is version_compare(mariadb_version,"<")
  loop:
    - 'pkg set -yn mariadb{{ installed_mariadb_version | regex_replace("^([0-9]+)\.([0-9]+)\..*$","\1\2") }}-server:mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-server'
    - 'pkg set -yn mariadb{{ installed_mariadb_version | regex_replace("^([0-9]+)\.([0-9]+)\..*$","\1\2") }}-client:mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-client'

- name: stop mysql before upgrade
  service:
    name: mysql-server
    state: stopped
  when: installed_mariadb_version and do_upgrade_mariadb and installed_mariadb_version | default(mariadb_version) is version_compare(mariadb_version,"<")

- name: upgrade all packages
  command: 'pkg upgrade -y'
  when: do_upgrade_mariadb or not installed_mariadb_version

- name: install pymysql
  pkgng:
    name: 'py{{ ansible_python_version | regex_replace("([2-3])\.([0-9]*)\..*$","\1\2") }}-pymysql'
    state: present

- name: remove lsof
  pkgng:
    name: lsof
    state: absent

- name: install mariadb
  pkgng:
    name:
      - 'mariadb{{ mariadb_version | regex_replace("[^0-9]","") }}-server'
      - 'py{{ ansible_python_version | regex_replace("([2-3])\.([0-9]*)\..*$","\1\2") }}-pymysql'
    state: '{% if do_upgrade_mariadb | default(False) %}latest{% else %}present{% endif %}'
  register: install_mariadb
  notify: mysql_upgrade

- name: patch wsrep_sst_common for lsof
  replace:
    path: /usr/local/bin/wsrep_sst_common
    regexp: 'lsof_available=1'
    replace: 'lsof_available=0'

- name: zfs layout
  include_tasks: 'zfs-layout.yml'
  when: mariadb_zfs_base | length > 0

- name: list removed options for {{ mariadb_version }}
  set_fact:
    removed_params: |
      [{% for vers in removed_mariadb_params.keys() %}
      {% if vers is version_compare(mariadb_version,"<=") %}
      "{{ removed_mariadb_params[vers] | join('","') }}"
      {% endif %}
      {% endfor %}]

- name: remove removed mariadb params for {{ mariadb_version }}
  ini_file:
    path: '{{ mariadb_server_ini }}'
    section: '{{ mariadb_server_ini_section }}'
    option: '{{ item }}'
    state: absent
    mode: '0640'
    group: '{{ mariadb_group }}'
    backup: True
  loop: '{{ removed_params }}'
  when: installed_mariadb_version and removed_params | count() > 0
  notify: restart mariadb

- name: '{{ mariadb_server_ini }}'
  ini_file:
    path: '{{ mariadb_server_ini }}'
    section: '{{ mariadb_server_ini_section }}'
    option: '{{ item.key }}'
    value: '{{ item.value | default(ignore) }}'
    allow_no_value: '{% if item.value == "" %}yes{% else %}no{% endif %}'
    mode: '0640'
    group: '{{ mariadb_group }}'
  loop: '{{ my_cnf_mysqld_default | combine(my_cnf_mysqld) | dict2items }}'
  when: not installed_mariadb_version or not mariadb_current_config[item.key] | default(False) or mariadb_current_config[item.key] != item.value
  notify: restart mariadb

- name: /var/run/mysql
  file:
    path: /var/run/mysql
    mode: '0755'
    owner: '{{ mariadb_owner }}'
    group: '{{ mariadb_group }}'
    state: directory

- name: newsyslog.conf.d and syslog.conf.d
  file:
    path: '/usr/local/etc/{{ item }}'
    state: directory
    mode: '0755'
  loop:
    - newsyslog.conf.d
    - syslog.d

- name: newsyslog when no syslog
  copy:
    dest: /usr/local/etc/newsyslog.conf.d/mariadb.conf
    content: |
      {{ mariadb_logdir }}/*.log  {{ mariadb_owner }}:{{ mariadb_group }}  640 7 10000  *  GZ /var/run/mysql/mysqld.pid
    mode: '0644'
  when: not mariadb_use_syslog

- name: syslog
  block:
    - name: log dir
      file:
        path: '{{ mariadb_logdir }}'
        state: directory
        mode: '0750'
        owner: '{{ mariadb_owner }}'
    - name: no log_error
      ini_file:
        path: '{{ mariadb_server_ini }}'
        section: '{{ mariadb_server_ini_section }}'
        option: '{{ item }}'
        state: absent
        mode: '0640'
        group: '{{ mariadb_group }}'
      loop:
        - log_error
        - log-error
    - name: get rc args
      command: 'sysrc -qn mysql_args'
      register: getrcargs
      failed_when: False
      changed_when: False
      check_mode: False
    - name: syslog in rc.conf
      lineinfile:
        dest: /etc/rc.conf
        line: 'mysql_args="{{ getrcargs.stdout }} --syslog"'
        regexp: '^mysql_args='
      when: getrcargs.stdout is not search("--syslog")
      notify: reload syslogd
    - name: syslogd config
      copy:
        dest: /usr/local/etc/syslog.d/mariadb.conf
        content: |
          !mysqld
          *.*   {{ mariadb_logdir }}/mariadb.log
          !mysqld_safe
          *.*   {{ mariadb_logdir }}/mariadb.log
          !mariadbd
          *.*   {{ mariadb_logdir }}/mariadb.log
          !mariadbd-safe
          *.*   {{ mariadb_logdir }}/mariadb.log
          !*
        mode: '0644'
      notify: reload syslogd
    - name: newsyslog with syslog
      copy:
        dest: /usr/local/etc/newsyslog.conf.d/mariadb.conf
        content: |
          {{ mariadb_logdir }}/mariadb.log   640 7 10000  *  CZ
          {{ mariadb_logdir }}/*.log  {{ mariadb_owner }}:{{ mariadb_group }}  640 7 10000  *  GZ /var/run/mysql/mysqld.pid
        mode: '0644'
    - name: create log file if needed
      copy:
        dest: '{{ mariadb_logdir }}/mariadb.log'
        content: ''
        force: no
        mode: '0640'
  when: mariadb_use_syslog

- name: backup old my.cnf
  copy:
    src: '{{ mariadb_basedir }}/my.cnf'
    dest: '{{ mariadb_basedir }}/my.cnf.bak.ansible_backup'
    remote_src: yes
    mode: '0640'
    group: '{{ mariadb_group }}'
  failed_when: False
  register: oldini
  when: 'mariadb_server_ini != mariadb_basedir+"/my.cnf"'

- name: remove old my.cnf
  file:
    path: '{{ mariadb_basedir }}/my.cnf'
    state: absent
  when: 'mariadb_server_ini != mariadb_basedir+"/my.cnf" and not oldini.failed'
  notify: restart mariadb

- name: rc.conf
  lineinfile:
    dest: /etc/rc.conf
    line: '{{ item.key }}="{{ item.value }}"'
    regexp: '^{{ item.key }}='
  with_items:
    - { key: mysql_dbdir, value: '{{ mariadb_datadir }}' }
    - { key: mysql_enable, value: '{% if galera.cluster_name | default(False) %}NO{% else %}YES{% endif %}' }
  when: curdatadir.stdout != mariadb_datadir

- name: get installed server version
  command: 'pkg query -x "%v" "mariadb.*-server"'
  check_mode: False
  register: pkgvers
  changed_when: False
  failed_when: false

- name: fix facts
  set_fact:
    # 1. currently running one
    # 2. /data if zfs
    mariadb_datadir: '{{ currentdatadir }}'
    installed_mariadb_version: '{% if pkgvers.stdout_lines | count > 0 
      %}{{ pkgvers.stdout_lines[0] }}{% endif %}'
  when: do_upgrade_mariadb | bool
